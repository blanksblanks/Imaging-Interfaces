












notes:
1. read all the images, process them
2. histogram, by doing RGB counts
3. make a pixel array of the image and count all the pixels
4. dimension of the image: 89 x 60

think about:
1. how to ignore the black
2. how many bins (256^3 is too much!)

L1_Norm: get similarity score between every pair of images
total_distance = sum( |3d_histogram_img_1[r][g][b] - 3d_histogram_img_2[r][g][b]|) / 2 / N
do R, G, B separately

divide by 89*60 * 6


http://stackoverflow.com/questions/10647311/how-do-you-merge-images-using-pil-pillow

http://www.pyimagesearch.com/2014/07/14/3-ways-compare-histograms-using-opencv-python/

http://effbot.org/imagingbook/image.htm

Links:
http://docs.opencv.org/trunk/doc/py_tutorials/py_imgproc/py_table_of_contents_imgproc/py_table_of_contents_imgproc.html (image processing)
http://docs.opencv.org/trunk/doc/py_tutorials/py_imgproc/py_gradients/py_gradients.html#gradients (laplacian)
http://docs.opencv.org/trunk/doc/py_tutorials/py_imgproc/py_histograms/py_histogram_begins/py_histogram_begins.html (histograms)
https://github.com/abidrahmank/OpenCV2-Python/tree/master/Official_Tutorial_Python_Codes/3_imgproc (code- equalizehist.py, laplacian.py)
http://nbviewer.ipython.org/github/dolaameng/tutorials/blob/master/opencv-practice/opencv%20python%20tutorials%202.6%20-%20image%20processing%20%28histogram%29.ipynb (histograms)

http://www.pyimagesearch.com/2014/07/14/3-ways-compare-histograms-using-opencv-python/
http://www.pyimagesearch.com/2014/01/27/hobbits-and-histograms-a-how-to-guide-to-building-your-first-image-search-engine-in-python/?__s=3ngy6w8kqza6zgpfn5qz (query)
http://www.pyimagesearch.com/2014/05/26/opencv-python-k-means-color-clustering/?__s=3ngy6w8kqza6zgpfn5qz (k means clustering)
http://www.pyimagesearch.com/2014/12/01/complete-guide-building-image-search-engine-python-opencv/



'''
plt.imshow(bgr_img, cmap = plt.get_cmap('gray'))
plt.xticks([]), plt.yticks([])  # to hide tick values on X and Y axis
plt.show()

while True:
    k = cv2.waitKey(0) & 0xFF    # 0xFF? To get the lowest byte.
    if k == 27: break            # Code for the ESC key

cv2.destroyAllWindows()
'''

'''
import argparse

# construct the argument parser and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-i", "--image", required = True,
    help = "Path to the image to be scanned")
args = vars(ap.parse_args())
'''

'''def main():
    # sequence = map(str, raw_input('Please enter your sequence ').split(' '))
    img = cv2.imread('fist-center.jpg',0)
    k = cv2.waitKey(0)

    if k == 27:         # wait for ESC key to exit
        cv2.destroyAllWindows()
    elif k == ord('s'): # wait for 's' key to save and exit
        cv2.imwrite('messigray.png',img)
        cv2.destroyAllWindows()

if __name__ == "__main__": main()

'''